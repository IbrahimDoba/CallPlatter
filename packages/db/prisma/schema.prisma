generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String?
  password              String?
  image                 String?
  emailVerified         DateTime?
  role                  String    @default("USER")
  onboardingCompleted   Boolean?   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  businessId            String?
  sessions              Session[]
  accounts              Account[]
  business              Business? @relation(fields: [businessId], references: [id])

  @@map("users")
}

/// NextAuth account links (for OAuth providers)
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @map("refresh_token")
  access_token       String?  @map("access_token")
  expires_at         Int?     @map("expires_at")
  token_type         String?  @map("token_type")
  scope              String?
  id_token           String?  @map("id_token")
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/// NextAuth email verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Business {
  id               String             @id @default(cuid())
  name             String
  description      String?
  phoneNumber      String
  address          String?
  website          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  aiAgentConfig    AIAgentConfig?
  elevenLabsAgent ElevenLabsAgent?
  appointments     Appointment[]
  businessMemories BusinessMemory[]
  calls            Call[]
  conversations    Conversation[]
  crmImports       CRMImport[]
  users            User[]
  subscription     Subscription?
  billingUsage     BillingUsage[]
  billingTransactions BillingTransaction[]

  @@map("businesses")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Call {
  id              String              @id @default(cuid())
  customerName    String?
  customerEmail   String?
  customerPhone   String?
  customerAddress String?
  transcript      String?
  summary         String?
  intent          String?
  callType        String?             @default("WEB")
  status          CallStatus          @default(INCOMING)
  duration        Int?                // Duration in seconds
  durationMinutes Decimal?            @db.Decimal(10, 2) // Duration in minutes (for billing)
  audioFileUrl    String?
  businessId      String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  twilioCallSid   String?
  logs            CallLog[]
  business        Business            @relation(fields: [businessId], references: [id])
  crmEnhancement  CRMCallEnhancement?

  @@map("calls")
}

model CallLog {
  id         String   @id @default(cuid())
  callId     String
  message    String
  sender     String
  timestamp  DateTime @default(now())
  audioChunk String?
  metadata   Json?
  call       Call     @relation(fields: [callId], references: [id], onDelete: Cascade)

  @@index([callId])
  @@map("call_logs")
}

model Appointment {
  id              String           @id @default(cuid())
  customerName    String
  customerPhone   String
  customerEmail   String?
  appointmentTime DateTime
  service         String?
  notes           String?
  status          AppointmentStatus @default(PENDING)
  businessId      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  business        Business         @relation(fields: [businessId], references: [id])

  @@map("appointments")
}

model Conversation {
  id         String    @id @default(cuid())
  customerId String?
  businessId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  business   Business  @relation(fields: [businessId], references: [id])
  messages   Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           String
  conversationId String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

/// Stores per-business AI agent configuration
model AIAgentConfig {
  id                 String   @id @default(cuid())
  businessId         String   @unique
  firstMessage       String?
  goodbyeMessage     String?
  systemPrompt       String?
  voice              String   @default("alloy")
  accent             String?  // Optional accent for AI agent
  responseModel      String   @default("gpt-4o-realtime-preview-2024-12-17")
  transcriptionModel String   @default("whisper-1")
  enableServerVAD    Boolean  @default(true)
  turnDetection      String   @default("server_vad")
  temperature        Float?
  askForName         Boolean? @default(true)
  askForPhone        Boolean? @default(true)
  askForCompany      Boolean? @default(false)
  askForEmail        Boolean? @default(true)
  askForAddress      Boolean? @default(false)
  settings           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  business           Business @relation(fields: [businessId], references: [id])

  @@map("ai_agent_configs")
}

/// Stores business-specific memory/context information
model BusinessMemory {
  id         String   @id @default(cuid())
  title      String
  content    String
  isActive   Boolean  @default(true)
  businessId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id])

  @@map("business_memory")
}

/// Simple CRM import tracking - Pinecone handles the actual data
model CRMImport {
  id                    String          @id @default(cuid())
  businessId            String
  fileName              String
  status                CRMImportStatus @default(PENDING)
  recordsProcessed      Int?
  phoneNumbersFound     Int?
  errorMessage          String?
  pineconeNamespace     String?         // Optional: group vectors by import
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  business              Business        @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@index([status])
  @@map("crm_imports")
}

/// Optional: Track CRM-enhanced calls for analytics
model CRMCallEnhancement {
  id              String   @id @default(cuid())
  callId          String   @unique
  customerFound   Boolean  @default(false)
  customerName    String?
  similarityScore Float?
  enhancedAt      DateTime @default(now())
  call            Call     @relation(fields: [callId], references: [id])

  @@index([callId])
  @@map("crm_call_enhancements")
}

/// ElevenLabs Agent configuration for businesses
model ElevenLabsAgent {
  id         String   @id @default(cuid())
  businessId String   @unique
  agentId    String
  voiceId    String
  voiceName  String
  configHash String? 
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id])

  @@map("elevenlabs_agents")
}


// Billing Models
model Subscription {
  id                 String             @id @default(cuid())
  businessId         String             @unique
  planType           PlanType
  status             SubscriptionStatus @default(TRIAL)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  minutesIncluded    Int                // Monthly minutes included in plan
  minutesUsed        Int                @default(0) // Minutes used in current period
  overageRate        Decimal            @db.Decimal(10, 2) // Rate per minute for overage (in NGN)
  trialEndsAt        DateTime?          // When trial period ends
  cancelledAt        DateTime?          // When subscription was cancelled
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  business           Business           @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

model BillingUsage {
  id              String   @id @default(cuid())
  businessId      String
  month           Int      // 1-12
  year            Int      // 2024, 2025, etc.
  totalMinutes    Decimal  @default(0) @db.Decimal(10, 2) // Total minutes used this month
  includedMinutes Int      // Minutes included in plan
  overageMinutes  Decimal  @default(0) @db.Decimal(10, 2) // Minutes over the included limit
  overageCost     Decimal  @default(0) @db.Decimal(10, 2) // Cost for overage minutes (in NGN)
  totalCost       Decimal  @default(0) @db.Decimal(10, 2) // Total cost for the month (overage only, base cost separate)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, month, year])
  @@index([businessId])
  @@index([month, year])
  @@index([businessId, year, month])
  @@map("billing_usage")
}

model BillingTransaction {
  id          String          @id @default(cuid())
  businessId  String
  type        TransactionType
  amount      Decimal         @db.Decimal(10, 2) // Amount in NGN
  description String
  month       Int?            // For monthly billing (1-12)
  year        Int?            // For monthly billing
  status      PaymentStatus   @default(PENDING)
  paidAt      DateTime?       // When payment was completed
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  business    Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([status])
  @@index([createdAt])
  @@index([businessId, month, year])
  @@index([type])
  @@map("billing_transactions")
}

// Enums
enum CRMImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum CallStatus {
  INCOMING
  IN_PROGRESS
  COMPLETED
  FAILED
  MISSED
  CANCELLED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PlanType {
  FREE
  STARTER
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  CANCELLED
  PAST_DUE
  SUSPENDED
}

enum TransactionType {
  SUBSCRIPTION
  OVERAGE
  PAYMENT
  REFUND
  CREDIT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}